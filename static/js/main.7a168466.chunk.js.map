{"version":3,"sources":["Coin.js","App.js","reportWebVitals.js","index.js"],"names":["Coin","name","image","symbol","price","volume","priceChange","className","src","alt","toLocaleString","toFixed","App","useState","coins","setCoins","search","setSearch","useEffect","axios","get","then","res","data","catch","error","console","log","filterdCoins","filter","coin","toLowerCase","includes","type","placeholder","onChange","e","target","value","map","market_cap","current_price","price_change_percentage_24h","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAgCeA,EA7BF,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,YAC/C,OACI,qBAAKC,UAAU,iBAAf,SACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,OAAf,UACI,qBAAKC,IAAKN,EAAOO,IAAI,WACrB,6BAAKR,IACL,mBAAGM,UAAU,cAAb,SAA4BJ,OAEhC,sBAAKI,UAAU,YAAf,UACI,oBAAGA,UAAU,aAAb,UAA2BH,EAAMM,iBAAjC,YACA,oBAAGH,UAAU,cAAb,UAA4BF,EAAOK,iBAAnC,YACCJ,EAAc,EACX,oBAAGC,UAAU,mBAAb,UACKD,EAAYK,QAAQ,GADzB,OAIA,oBAAGJ,UAAU,qBAAb,UACKD,EAAYK,QAAQ,GADzB,gBCiDTC,MA/Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,IAAMC,IAAI,4HACTC,MAAK,SAAAC,GACJP,EAASO,EAAIC,SAEZC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,IAEH,IAIMG,EAAed,EAAMe,QAAO,SAAAC,GAAI,OAClCA,EAAK7B,KAAK8B,cAAcC,SAAShB,EAAOe,kBAI5C,OACE,gCACE,sBAAKxB,UAAU,cAAf,UACE,oBAAIA,UAAU,YAAd,2BACA,+BACE,uBACA0B,KAAK,OACLC,YAAY,SACZ3B,UAAU,aACV4B,SAlBa,SAAAC,GACnBnB,EAAUmB,EAAEC,OAAOC,eAsBjB,qBAAK/B,UAAU,iBAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,SACf,sBAAKA,UAAU,YAAf,UACI,mBAAGA,UAAU,aAAb,sCACA,mBAAGA,UAAU,cAAb,gCACA,mBAAGA,UAAU,eAAb,wCAKXqB,EAAaW,KAAI,SAAAT,GAEhB,OACE,cAAC,EAAD,CAEA7B,KAAM6B,EAAK7B,KACXC,MAAO4B,EAAK5B,MACZC,OAAQ2B,EAAK3B,OACbE,OAAQyB,EAAKU,WACbpC,MAAO0B,EAAKW,cACZnC,YAAawB,EAAKY,6BANbZ,EAAKa,WC5CLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7a168466.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Coin.css';\r\n\r\nconst Coin = ({name, image, symbol, price, volume, priceChange}) =>{\r\n    return(\r\n        <div className=\"coin-container\">\r\n            <div className=\"coin-row\">\r\n                <div className=\"coin\">\r\n                    <img src={image} alt=\"crypto\" />\r\n                    <h1>{name}</h1>\r\n                    <p className=\"coin-symbol\">{symbol}</p>\r\n                </div>    \r\n                <div className=\"coin-data\">\r\n                    <p className=\"coin-price\">{price.toLocaleString()}円</p>\r\n                    <p className=\"coin-volume\">{volume.toLocaleString()}円</p>\r\n                    {priceChange < 0 ? (\r\n                        <p className=\"coin-percent red\">\r\n                            {priceChange.toFixed(2)}%\r\n                        </p>\r\n                        ): (\r\n                        <p className=\"coin-percent green\">\r\n                            {priceChange.toFixed(2)}%\r\n                        </p>\r\n                    )}\r\n                </div>\r\n            </div> \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Coin","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Coin from './Coin';\n\n\nfunction App() {\n  const [coins, setCoins] = useState([])\n  const [search, setSearch] = useState('')\n\n  useEffect(()=>{\n    axios.get('https://api.coingecko.com/api/v3/coins/markets?vs_currency=jpy&order=market_cap_desc&per_page=100&page=1&sparkline=false')\n    .then(res=>{\n      setCoins(res.data);\n      // console.log(res.data);\n    }).catch(error => console.log(error));\n  }, []);\n\n  const handleChange = e =>{\n    setSearch(e.target.value)\n  }\n\n  const filterdCoins = coins.filter(coin => \n      coin.name.toLowerCase().includes(search.toLowerCase())\n    )\n\n  //表示内容\n  return (\n    <div>\n      <div className=\"coin-search\"> \n        <h1 className=\"coin-text\">Search Crypto</h1>\n        <form>\n          <input \n          type=\"text\" \n          placeholder=\"search\" \n          className=\"coin-input\" \n          onChange={handleChange} />\n        </form>\n      </div>\n\n\n      <div className=\"coin-container\">\n          <div className=\"coin-row\">\n              <div className=\"coin\"></div>    \n              <div className=\"coin-data\">\n                  <p className=\"coin-price\">現在価格</p>\n                  <p className=\"coin-volume\">出来高</p>\n                  <p className=\"coin-percent\">前日比</p>          \n              </div>\n          </div> \n      </div>\n\n      {filterdCoins.map(coin =>{\n        //res.dataの項目に合わせる\n        return(\n          <Coin \n          key={coin.id} \n          name={coin.name} \n          image={coin.image}\n          symbol={coin.symbol}\n          volume={coin.market_cap}\n          price={coin.current_price}\n          priceChange={coin.price_change_percentage_24h}\n          />);\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}